<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XDbAccess.AutoTrans</name>
    </assembly>
    <members>
        <member name="T:XDbAccess.AutoTrans.DbConnectionWrap">
            <summary>
            对数据库连接对象进行封装
            </summary>
        </member>
        <member name="M:XDbAccess.AutoTrans.DbConnectionWrap.#ctor(System.Data.IDbConnection,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            构造函数
            </summary>
            <param name="realConnection"></param>
            <param name="loggerFactory"></param>
        </member>
        <member name="P:XDbAccess.AutoTrans.DbConnectionWrap.Guid">
            <summary>
            连接唯一Id
            </summary>
        </member>
        <member name="P:XDbAccess.AutoTrans.DbConnectionWrap.RealConnection">
            <summary>
            实际数据库连接对象
            </summary>
        </member>
        <member name="P:XDbAccess.AutoTrans.DbConnectionWrap.TransScope">
            <summary>
            事务对象
            </summary>
        </member>
        <member name="P:XDbAccess.AutoTrans.DbConnectionWrap.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:XDbAccess.AutoTrans.DbConnectionWrap.ConnectionTimeout">
            <summary>
            连接超时
            </summary>
        </member>
        <member name="P:XDbAccess.AutoTrans.DbConnectionWrap.Database">
            <summary>
            
            </summary>
        </member>
        <member name="P:XDbAccess.AutoTrans.DbConnectionWrap.State">
            <summary>
            
            </summary>
        </member>
        <member name="M:XDbAccess.AutoTrans.DbConnectionWrap.BeginTransaction">
            <summary>
            开启事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:XDbAccess.AutoTrans.DbConnectionWrap.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            开启事务
            </summary>
            <param name="il"></param>
            <returns></returns>
        </member>
        <member name="M:XDbAccess.AutoTrans.DbConnectionWrap.ChangeDatabase(System.String)">
            <summary>
            
            </summary>
            <param name="databaseName"></param>
        </member>
        <member name="M:XDbAccess.AutoTrans.DbConnectionWrap.Close">
            <summary>
            关闭连接 
            </summary>
        </member>
        <member name="M:XDbAccess.AutoTrans.DbConnectionWrap.CreateCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XDbAccess.AutoTrans.DbConnectionWrap.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:XDbAccess.AutoTrans.DbConnectionWrap.Open">
            <summary>
            打开连接
            </summary>
        </member>
        <member name="M:XDbAccess.AutoTrans.DbConnectionWrap.OpenAsync">
            <summary>
            打开连接
            </summary>
            <returns></returns>
        </member>
        <member name="T:XDbAccess.AutoTrans.DbContext">
            <summary>
            数据库上下文对象，用于管理数据库连接与事务
            </summary>
        </member>
        <member name="M:XDbAccess.AutoTrans.DbContext.#ctor(XDbAccess.AutoTrans.DbContextOptions)">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:XDbAccess.AutoTrans.DbContext.LoggerFactory">
            <summary>
            日志工厂
            </summary>
        </member>
        <member name="P:XDbAccess.AutoTrans.DbContext.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="M:XDbAccess.AutoTrans.DbContext.GetOpenedConnection">
            <summary>
            获取已打开的数据库连接对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XDbAccess.AutoTrans.DbContext.GetOpenedConnectionAsync">
            <summary>
            获取已打开的数据库连接对象(异步版本)
            </summary>
            <returns></returns>
        </member>
        <member name="M:XDbAccess.AutoTrans.DbContext.TransScope(XDbAccess.AutoTrans.TransScopeOption,System.Data.IsolationLevel)">
            <summary>
            开启事务
            </summary>
            <param name="option"></param>
            <param name="il"></param>
            <returns></returns>
        </member>
        <member name="T:XDbAccess.AutoTrans.DbContextOptions">
            <summary>
            数据库上下文对象参数
            </summary>
        </member>
        <member name="P:XDbAccess.AutoTrans.DbContextOptions.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:XDbAccess.AutoTrans.DbContextOptions.DbFactory">
            <summary>
            Db工厂
            </summary>
        </member>
        <member name="P:XDbAccess.AutoTrans.DbContextOptions.LoggerFactory">
            <summary>
            日志工厂
            </summary>
        </member>
        <member name="T:XDbAccess.AutoTrans.TransScope">
            <summary>
            事务范围，默认TransScopeOption为Required
            当TransScopeOption为RequireNew时，TransScope是独立的，内层TransScope进行Commit、Rollback、Disable操作不会对外层的TransScope产生影响。
            当TransScopeOption为Required时，内层的TransScope只能进行Rollback操作，当内层TransScope进行Rollback操作时会对事务产生影响，并且所有外层的TransScope.State将被设置为Rollback状态，
            内层的TransScope进行Commit与Disable操作不会对事务产生影响，只有最外层的TransScope进行Commit与Disable操作时才会对事务产生影响。
            不支持在TransScope范围中开启新线程并在新线程中使用TranScope
            </summary>
        </member>
        <member name="E:XDbAccess.AutoTrans.TransScope.OnDisposed">
            <summary>
            Disposed事件
            </summary>
        </member>
        <member name="M:XDbAccess.AutoTrans.TransScope.#ctor(System.Data.IDbConnection,XDbAccess.AutoTrans.TransScope,System.Data.IsolationLevel,XDbAccess.AutoTrans.TransScopeOption,Microsoft.Extensions.Logging.ILoggerFactory,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="conn"></param>
            <param name="parent"></param>
            <param name="il"></param>
            <param name="option"></param>
            <param name="loggerFactory"></param>
            <param name="connectionId"></param>
        </member>
        <member name="P:XDbAccess.AutoTrans.TransScope.Guid">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:XDbAccess.AutoTrans.TransScope.Parent">
            <summary>
            父级TransScope对象
            </summary>
        </member>
        <member name="P:XDbAccess.AutoTrans.TransScope.Option">
            <summary>
            TransScope参数
            </summary>
        </member>
        <member name="P:XDbAccess.AutoTrans.TransScope.State">
            <summary>
            TransScope状态
            </summary>
        </member>
        <member name="P:XDbAccess.AutoTrans.TransScope.Trans">
            <summary>
            数据库事务对象
            </summary>
        </member>
        <member name="M:XDbAccess.AutoTrans.TransScope.Begin">
            <summary>
            开启事务
            </summary>
        </member>
        <member name="M:XDbAccess.AutoTrans.TransScope.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:XDbAccess.AutoTrans.TransScope.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:XDbAccess.AutoTrans.TransScope.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:XDbAccess.AutoTrans.TransScopeOption">
            <summary>
            事务范围选项。
            </summary>
        </member>
        <member name="F:XDbAccess.AutoTrans.TransScopeOption.Required">
            <summary>
            如果当前范围内已有事务则延用该事务，否则创建新事务。这是默认值。
            </summary>
        </member>
        <member name="F:XDbAccess.AutoTrans.TransScopeOption.RequireNew">
            <summary>
            无论当前范围内是否存在事件都创建新事务。
            </summary>
        </member>
        <member name="T:XDbAccess.AutoTrans.TransScopeState">
            <summary>
            TransScope状态
            </summary>
        </member>
        <member name="F:XDbAccess.AutoTrans.TransScopeState.Init">
            <summary>
            初始
            </summary>
        </member>
        <member name="F:XDbAccess.AutoTrans.TransScopeState.Begin">
            <summary>
            事务开启
            </summary>
        </member>
        <member name="F:XDbAccess.AutoTrans.TransScopeState.Commit">
            <summary>
            事务提交
            </summary>
        </member>
        <member name="F:XDbAccess.AutoTrans.TransScopeState.Rollback">
            <summary>
            事务回滚
            </summary>
        </member>
        <member name="F:XDbAccess.AutoTrans.TransScopeState.Dispose">
            <summary>
            已释放
            </summary>
        </member>
        <member name="T:XDbAccess.AutoTrans.DbContextOptionsBuilder">
            <summary>
            DbContext参数对象构造器
            </summary>
        </member>
        <member name="M:XDbAccess.AutoTrans.DbContextOptionsBuilder.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XDbAccess.AutoTrans.DbContextOptionsBuilder.#ctor(XDbAccess.AutoTrans.DbContextOptions)">
            <summary>
            构造函数
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:XDbAccess.AutoTrans.DbContextOptionsBuilder.Options">
            <summary>
            DbContext参数对象
            </summary>
        </member>
        <member name="M:XDbAccess.AutoTrans.DbContextOptionsBuilder.UseLoggerFactory(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            配置日志工厂
            </summary>
            <param name="loggerFactory"></param>
            <returns></returns>
        </member>
        <member name="T:XDbAccess.AutoTrans.AutoTransServiceCollectionExtensions">
            <summary>
            事务服务扩展类
            </summary>
        </member>
        <member name="M:XDbAccess.AutoTrans.AutoTransServiceCollectionExtensions.AddDbContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{XDbAccess.AutoTrans.DbContextOptionsBuilder})">
            <summary>
            添加DbContext
            </summary>
            <typeparam name="DbContextType"></typeparam>
            <param name="serviceCollection"></param>
            <param name="optionsAction"></param>
            <returns></returns>
        </member>
        <member name="T:XDbAccess.AutoTrans.IDbContext">
            <summary>
            管理数据库连接、事务，并根据配置提供相应的DbHelper的实例
            </summary>
        </member>
        <member name="P:XDbAccess.AutoTrans.IDbContext.LoggerFactory">
            <summary>
            日志工厂
            </summary>
        </member>
        <member name="P:XDbAccess.AutoTrans.IDbContext.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="M:XDbAccess.AutoTrans.IDbContext.GetOpenedConnection">
            <summary>
            获取已打开的数据库连接对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XDbAccess.AutoTrans.IDbContext.GetOpenedConnectionAsync">
            <summary>
            获取已打开的数据库连接对象(异步版本)
            </summary>
            <returns></returns>
        </member>
        <member name="M:XDbAccess.AutoTrans.IDbContext.TransScope(XDbAccess.AutoTrans.TransScopeOption,System.Data.IsolationLevel)">
            <summary>
            开启事务
            </summary>
            <param name="option"></param>
            <param name="il"></param>
            <returns></returns>
        </member>
        <member name="T:XDbAccess.AutoTrans.IDbFactory">
            <summary>
            数据库对象工厂
            </summary>
        </member>
        <member name="M:XDbAccess.AutoTrans.IDbFactory.CreateConnection">
            <summary>
            创建数据库连接对象
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
